- HW requirment:
	- RAM at least 8 Mb
	- storage: at least 4 MB


- linux kernel:
	- kernel lives in kernel space and can access harware and io directly 
	- user space is where user code is excuted, it has less privilge and communicate with the kernel using system call 
	- at any time point the kernel is in one of three state
		- user space executing user code
		- kernel space in process context in bahalf of a process
		- kernel space in interrupt context 
	- kernel code has no access to the c library and has no memory proctection 
- user space:
	- the code which runs in a low provolige mode
	- it is linked into glibc 

- glibc:
	- every user applictioon in the kernel is linked into glibc 
	- glibc would implement the system call which is needed to access the kernel from the user land
	 - 
- kernel:
	- resource manager(CPU time, memory, scheduler )
	- abstraction layer between user application and the hardware

- monolthic kernel:
	- the kernel is executed as one process and the communication with the user space is achieved using system call

- mikro kernel:
	- the kernel is divided to many process which would communicate with each other using IPC 
	- kernel module runs as application with MMU need as they donot share the address space 

- linux module:
	- linux is divided to a well known modules 
		- HAL:	
			- it is used to manage CPU, MMU, DMA, Timers
		- Scheduler:
			- scheduler works with kernel threads, user process, threads which is part of a process
		- file system: 
			- it uses VFS which is used to provide the same API to deal with different file systems such as ext2, jffs2, etc
		- I/O:
			- provides char, block, network devices 

- build process:
	- in the host machine we have to install gcc, make and perl using the following command
		- sudo apt install gcc make perl 
	- to install the cross compile tool chain which enables u to compile arm code on intel processor use the following command
		- sudo apt install crossbuild-essential-armhf
		- this would install the tools need such as compiler, linker, objdump, etc
	- to find the kernel which is running u can use the command 
		- uname -r 
	- build the kernel:
		- download source code of the kernel 
		- configure the kernel using:
			- make defconfig
				- it is used to apply the default configuration of the kernel
			- make menuconfig
				- it is used to adjust the configuration according to 
		- build the kernel 
			- make all
		- install the modules under /lib/modules/$(uname -r ) using
			- make modules_install


- LKM frame work:
	- it is a way to enable us to change a part of the kernel without rebuilding the whole system 
	- compile a piece of code outside the kernel source code 
	- if u build a module and insert it after u build the kernel we call it out of tree code
	- to build a module:
		- source file
		- header file
		- make file
		- make
	- the module would be built and .ko file would be generated then u can install it using insmod command 

- LKM:
	- module has entry point with is given by the function module_init()
	- u insert the module using the command insmod and the path to the module
	- rmmod to delete the module
	- in both cases u need root user to achieve it 

- LKM make file:
	- the name of the module which u want to build is giving using:
		obj-m +=name_of_module.o
	- rule:
		make -C "kernel source code" M=$(PWD) modules 

- system start up:
	- there are three component which we need to start up the system: bootloader, kernel, init process 
	- bootloader:
		- it is very hardware dependent 
		- the job is to initalize the hardware and start up the kernel
	- kernel:
		- at the begining run hardware dependent code which is responsible for initializing the hardware, setup stack, mmu initalize, load interrupt table and then would call kernel_startup
		- kernel_startup:
			- high level initalizaion, mount rootfs, start init process 
	- init process:
		- it would have PID of 1 
		- it is defined in etc/initab 
		- normally u would mount special file system such as proc and start services such as DHCP, ssh, etc

- user space vs kernel space:
	- normally the process is in user space
	- switching from user space to kernel space happens in 2 cases:
		- system call
		- interrupt

- scheduler:
	- critieria to measure the scheduler:
		- CPU utilization
		- waiting time
		- throughput: the amount of process is done per time of unit 
		- algorithums:
			- FIFO:
			- short job first:

- preemtive:
	- in user space process can interrupt another process if it has a higher priority
	- in kernel land only interrupt can interrupt the process

- priority:
	- policy is the bahviour of the scheduler which decides what process should run and for how long
	- the process could be I/O boundary which includes alot of waiting or process bound which mean the process execute code most of the time 
	- priority value:
		- nice priority which is the value from -20 to 19 
		- real time priority from 0  to 99
		- real time process has more priority than other process which are not real time 

- time slice: 
	- how lond should the process run too long then the system is no more interactive while too short then the system is slow because the overhead including chaning the context
	- we assign a proporition of the processor time for each process depending on the load of the system and the weight of each process scheduler make sure that if a process used less than what was assigned to it, it preemt the other process when it is needed

- fair scheduler:
	- each process receive 1/n of the process time where n in the number of the process on the system
	- we pick the task with the highest waiting time in the running queue 
	- the update of the process happen by timer interrupt
	- chaning the process happens when the proces return from system call

- system call:
	- user application would call a system call in the c library
	- in c library software interrupt would be made to change to the kernel mode
	- in kernel a function related to the system call would be executed
	- clibrary pass the data to the system call by register but if there is more data to pass than the register then it is stored in block of memory and the in the register the address of this block would be sent 

- threads: 
	- visual address space
	- every user space thread has two stacks one in user space and another one in Â´the kernel space
	- for every thread in the kernel space there is a task_struct to represent the thread
	- VAS of the process consist of text, data, heap, library and stack  

- task_struct:
	- it has all the information we need to represent a thread
	- it is chained in a linked list called task list 
	- to get the task_struct in the kernel code we use current marco which yield a pointer to the task_struct 
	- current is only valid when we run in process context

- process:
	- it is an instance of a program in execution 
	- from kernel point of view process is something where the kernel has to provide resourcess like CPU, memory, etc.
	- process memory consist of text section, data section, stack, heap
	- u can identify a process using PID each process has a unique PID 
	- using current u can address task_struct of the kernel process
	- process state:
		- the process is created and it is ready to be executed 
		- when the time slice ends schedule makes another process active
		- if it is waiting for I/O it moves to a specifi waitqueue 
	- hardware context:
		- it refers to the operation of saving old registers of the process which is scheduled out and restoring the registers of the process which is scheduled in
	- to get to know the active process on the system:
		- ps -el

- interrupt:
	- interrupt controller:
		- in x86 it is called PIC or APIC
		- in ARM it is called GIC
	- enable the hardware to signal the processor
	- there is IDT which has pointer to functions which should be called when interrupts happen 
	- kernel should tell the CPU where to find this table before enabling the interrupts 
	- processor would interrupt the executing context and notify the kernel that interrupt has happened, OS would execute ISR in response to the interrupt which runs in interrupt context meaning it cannot sleep while executing the interrupt
	- ISR would run while all other interrupt are enabled except his own interrupt line

- to register an interrupt handler to handle a specific interrupt we use the following API: 
	- request_irq(unsigned int irq, irq_handler_t (*handler_func)(int, void *), unsigned long flags, const char *name, void *dev):
	- u can tell that request_irq() is simliar to signal hanlder in user land but the interupt handler runs in kernel land

- Level interrupt and Edge Interrupt:
	- Level: the interrupt would be fired when the line in the CPU  changed from 0 to 1 and stay active untill the application deassert the line, that means the interrupt handler might be recalled if the interrupt was not cleared

	- Edge: the interrupt handler would be invoked only when the line to the CPU is changed from 0 to 1, no deassertion is required.

- interrupt handler:
	- u should not call any function which might call schedule
	- the interrupt by default mask all interrupt lines in the core which execute the interrupt and mask the interrupt line on all the cores 

- PIC:
	- programmer interrupt controller
	- devices are connected to the PIC
	- when the device rise an interrupt the PIC connvert the signal to a vector and store it in I/O port which can be read by the CPU and interrupt the CPU which would read the vector and then write the PIC port, PIC would reset the interrupt line of the CPU
	 
- timer:
	- relative timer is to say something would run in 5 seconds in the future, while absolute time is to say something would run at 5 am
	- kernel knows the tick rate so he knows the time between every tick as it is nothing rather than 1/ticks second
	- HZ is the number of tickes per second  
	- jiffies is the amount of times has passed since the system has booted 
	- if u want to compare any time u should convert then to signed value and start to compare the values
		- ex: time_before(a,b) int(a) -int(b) < 0
		- it depends on the fact that when overflow in signed variable happens it start couting from the highest negatvie to the lowest negative
		- 0 1 2 3 ..244 255 -255 -244 ..3 2 1 0
	- sytem timers:
		- hardware would issue an interrupt at fixed freqency 
		- timer handler would be invoked in response to this interrupt and would update system timer 

	- dynamic timer:
		- it is a way to schedule a function to run in the future at a specific time point

- memory:
	- KiB and KB:
		- as computer is based on binary system KiB is the suitable meachanism 
		- KiB = 2^10 which is 1024
		- KB = 10^3 which is 1000
	-  virtual and physical memory:
		- page frame : physical memory
		- page : virtual memory

- page table:
	- for each process the kernel create a table which maps the virtual address to physical address 
	- the table exists in the kernel so a process can access only memory which the kernel has allowed
	- when context switch happens register in the CPU would be chaged to point to the page table of this process 

- VAS:
	- every file would be linked into glibc as default
	- the upper part of the VAS is always the kernel and it is address started from the PAGE_OFFSET 
	- lowmem of the kernel where the memory is directed mapped to the VAS with the max size of 768 MB
	- to change from physical to logical address
		PA = kVA - Page_offset

- char device:
	- it is the idea that u isolate the code which deal with the hardware from the application, for example application which use the write system call on a harddisk should not care whether the harddisk sector is 512 or 1024 byte sector. device driver should handle this issue without bothering the application
	- 

- block device:
	- it has the ability to access the data on fixed chuck size 
	- it has the ability to access the data in random access

- partition:
	- it is a logic deviation of storage medium
	- it has meta data for the partition and then the data which is inside the partiton 
	- the idea behind the partiton that each partition can has it is own file system type
	- the kernel can then mount the file system of this partition

- block size:
	- big block size has disadvantage that the waste of the space might happen as if we have a file which size is block size + 1 byte it would occupy 2 block size
	- small block size has disadvantage that the meta data requires to map the block to a file would be large 

- file system:
	- there are different file system some are done to implemente good storage other is done for speed 
	- 

- ext2:
	- to build the file system as ext2 we use the utility mkfs.ext2 which is similar to the command format in DOS

- JFFS2:
	- journal flash file system
	- u need utility to build the file system to support this file system 
		- mkfs.jffs2:
			- -i or -b: little or big indian
			- -n: no clean marker 
			- -e: size of clean block 
			- -o: the output to be produced
			- -s: page size 

- MTD:
	- memory technology device
	- it is not a block device rather a char deivce driver
	- it implements read, write and erase functions
	- it has wear level functionality
	- Flash card or USB flash is not mtd device but has FTL to handle this functionality
	- flash has flash translation layer which provide API to the application
	- it has software partition 
	- bad block table is stored at the last two blocks of the flash
	- mtd subsystem is divided to application and drivers and export the device as char and block deivce as some operation is possible only on char while other are possible only on block device
	- mtd is divided to application and drivers application is what i write , driver is how to write it 

	- CFI:
		- comman flash interface 
		- enabled by selection CONFIG_MTD_CFI 
		- it determine the flash chip characters such as manufacture, device type, erase block size and where the partiton table is stored
		- by CFI u can use different chip from the same vendor as the configuration is written in the flash itself so u dont need to change any thing if u changed the chip  
	- 

- FLash:
	- you can decide to store the data on the flash as RAW data or as file system
	- Raw data has the benefits that u do not require file system 
	- flash could by NAND or NOR flash
	- flash means the data is stored electrically not hardware movent parts are required
	- it consists of controller and flash itself 
	- NAND:
		- the flash is divide to block -> page which is data + out of band data
		- block: here erase is implemented
		- page: read / write is implemented

- address:
	- physical address:
		- address between CPU and the memory
	- bus address:
		- address of a peropheral	
	- kernel logical address:
		- it differts only from the physical address by offset
		- macro like __pa() and __va() can be used to convert between logical and physical address space
	- kernel virtual address:
		- it is not contingous and mapped to the memory as individual parts

- VFS: 
	- virtual file system
	- it provides an abstaction between the application and the file system inplemention
	- it handles the system call which is relevant to the file system like open,read,copy,
	- not all system call require that the VFS send interact with the actual file system, when we issue close system call there is no need that the VFS interact with the actual file system it just hast to release the resourcess from the RAM
	- each file system should translate it is implementation to linux file system model
	- common file model of linux:
		- superblock: 
			- store information about the mounted file system 
		- inode:
			- store information about a specific file 
		- file:
			- store information about the interaction between an open file and a process 
		- dentry:
			- store information about the linking of directory entery 

- reference counting:
	- it is a way to keep track of the c structure
	- by embedded koject in any structure u can use reference counting

- kobject:
	- struct kobject { const char* k_name; struct kref kref; struct list_head entry; struct kobject* parent; struct kset* kset; struct kobj_type * ktype; struct sysfs_dirent * sd; };
	- k_name: the name which is used by sysfs subsystem
	- kref: using in reference managment
	- entry: groups kobjects in list
	- kset: grouping the object in set
	- parent: point to the parent
	- ktype: information about the data structure in which the object is embedded, of greatest importance is the destructore 

- kset: struct kset {struct kobj_type * ktype; struct list_head list; struct kobject kobj; struct kset_uevent_ops * uevent_ops; };

- procfs:
	- it exists only in the RAM
	- it is mounted under /proc
	- to create directory in procfs: 
		- struct proc_dir_entry *proc_mkdir(const char *name, struct proc_dir_entry *parent);
	
- sysfs:
	- it is a tree like structure where bus, device, driver are implemented
	- the file system are in /sys implemented
	- to create file under sys directory: 
		- device_create_file(struct device *dev, const struct device_attribute *attr);

- page table:
	- it exists in each process
	- it maps the virtual address to physical address
	- page frame is the address in the RAM while page is the VM address
	- it exists in the kernel user space
	- virtual address are consist of table index and offset inside the memory
	- table index:
		- divide the table index into 2 directory so u dont have to have large contingous memory for the page table

- working with the I/O:
	- memory mapped I/O:
		- they are address space in the processor which is mapped to I/O region

	- port mapped I/O:
		- instructions which is only used to work with the I/O 

- building the kernel:
	- in the top level makefile in the source code the macro KERNELVERSION is defined 
	- u can see the version of the kernel using the command cat /proc/version
	- kernel is designed to support different platform when u choice a specific arch in the make file u force the build system to choice the code from a specific folder ex:arm

- configuration:
	- the idea is to build the kernel with capabilities which u only need as if u build the kernel which support every thing it would be very big to handle 

	-  .config file is produced which has all the configuration which affects the build, while the building it would converted to header file 
	- make disclean:
		- it would delete the .config file from the source file system
	- make menuconfig:
		- u get to change the config file using menu 
	- make defconfig:
		- update the configuration by the default value based on the target type
- target:
	- vmlinux:
		- it is stand alone ELF file which has all the symbol resolved 
		- it consists of multiple files like head.o which is in charge of initalize the kernel
	- zImage:
		- it is compressend vmlinux of the kernel
	- uImage:
		- it is zImage + uboot header 
	- module:
		- build all module which is configured with menuconfig als module
	- module_install:
		- install the modules in the path which is defined by INSTALL_MOD_PATH

linux start up:
	- power on then the bootloader would be executed which has the task to initalize the hardware then would load the kernel to the memory at this point MMU is not active, the kernel image has bootstrape load in itself which has the task to enable MMU and page table this code is made by the CPU vendor not by linux then the call start_kernel() which is developed by linux which would parse the command line and start the init process, at the end the kernel search fot the init process in one of four places:
	- run_init_process(â/sbin/initâ);
	- run_init_process(â/etc/initâ);
	- run_init_process(â/bin/initâ);
	- run_init_process(â/bin/shâ);

- root file system:
	- it referes to the file system which is mounted at the / point in the system 
	- in /bin there would be the busybox and softlink to sh so the init process would be busybox
	- the starting scripts in rcS
	- in /lib there would be the modules of linux 

- init process:
	- using busybox to decide what process would run at the begining u configure inittab -> /etc/inittab with run level.
	- when init starts it reads inittab under /etc/inittab
	- by providing the initial ram disk to the linux kernel kernel would copy it to kernel memory
	- by providing root=/dev/ram0 then the initial RAM disk stay in memory

- component of embedded linux:
	- kernel:
		- which handle the resourcess

	- GNU c:
		- tool chain to build the kernel
		- it depends on a specific C library

	- c library:
		- provide system call which enable user code to access the kernel
		- 
	- bootloader:
		- load the kernel from flash to ram and execute the kernel 

- uboot:
	- bad block is "block not a page" if u marked a block as bad then i wont be read from or write to
	- the bad block is at the end of the flash
	- nand bad block number * erase block size 